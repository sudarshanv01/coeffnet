import logging

import numpy as np

from instance_mongodb import instance_mongodb_sei

if __name__ == "__main__":
    """Store structures in the right collection after they
    have been generated by the different workflows."""

    logger = logging.getLogger(__name__)
    logging.basicConfig(level=logging.INFO)

    db = instance_mongodb_sei(project="mlts")
    data_collection = db.rudorff_lilienfeld_data
    calculation_collection = db.rudorff_lilienfeld_calculation

    cursor = calculation_collection.find(
        {"task_label": "frequency calculation"},
        {
            "calcs_reversed.frequencies": 1,
            "tags.reaction_name": 1,
            "tags.rxn_number": 1,
            "output": 1,
        },
    )

    for _doc in cursor:
        frequencies = _doc["calcs_reversed"][0]["frequencies"]
        frequencies = np.array(frequencies)
        num_imag_frequencies = np.sum(frequencies < 0)

        if num_imag_frequencies != 1:
            doc_ffopt = calculation_collection.find_one(
                {
                    "task_label": "frequency flattening transition state optimization",
                    "tags.rxn_number": _doc["tags"]["rxn_number"],
                    "tags.reaction_name": _doc["tags"]["reaction_name"],
                },
                {
                    "calcs_reversed.frequencies": 1,
                    "tags.reaction_name": 1,
                    "tags.rxn_number": 1,
                    "output": 1,
                },
            )
            if doc_ffopt is not None:
                logger.info(
                    "Found transition state for {} through FFOpt".format(_doc["tags"])
                )
                frequencies = doc_ffopt["calcs_reversed"][0]["frequencies"]
                frequencies = np.array(frequencies)
                num_imag_frequencies = np.sum(frequencies < 0)
                if num_imag_frequencies != 1:
                    logger.info("No transition state found for {}".format(_doc["tags"]))
                    continue
                doc = doc_ffopt
                ts_structure = doc["output"]["optimized_molecule"]
            else:
                logger.info("No transition state found for {}".format(_doc["tags"]))
                continue
        else:
            logger.info(
                "Found transition state for {} through frequency calculation".format(
                    _doc["tags"]
                )
            )
            doc = _doc
            ts_structure = doc["output"]["initial_molecule"]

        ts_frequencies = doc["output"]["frequencies"]
        ts_frequency_modes = doc["output"]["frequency_modes"]

        doc_data = data_collection.find_one(
            {
                "rxn_number": doc["tags"]["rxn_number"],
                "reaction_name": doc["tags"]["reaction_name"],
            },
        )

        if doc_data is None:
            doc_data = {
                "rxn_number": doc["tags"]["rxn_number"],
                "reaction_name": doc["tags"]["reaction_name"],
            }
            data_collection.insert_one(doc_data)

        if "transition_state_with_one_imaginary_frequency" not in doc_data.keys():
            doc_data["transition_state_with_one_imaginary_frequency"] = ts_structure

        if "transition_state_frequencies" not in doc_data.keys():
            doc_data["transition_state_frequencies"] = ts_frequencies

        if "transition_state_frequency_modes" not in doc_data.keys():
            doc_data["transition_state_frequency_modes"] = ts_frequency_modes

        data_collection.update_one(
            {
                "rxn_number": doc["tags"]["rxn_number"],
                "reaction_name": doc["tags"]["reaction_name"],
            },
            {"$set": doc_data},
        )
